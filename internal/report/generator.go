package report

import (
	"bytes"
	"encoding/json"
	"fmt"
	"html/template"
	"os"
	"strings"
	"time"

	"github.com/TFMV/tightrope/pkg"
	"github.com/rs/zerolog"
)

// Generator handles report generation in different formats
type Generator struct {
	logger zerolog.Logger
}

// NewGenerator creates a new report generator
func NewGenerator() *Generator {
	return &Generator{
		logger: zerolog.New(os.Stderr).With().Timestamp().Logger(),
	}
}

// GenerateReport generates a report in the specified format
func (g *Generator) GenerateReport(report *pkg.AuditReport, format string) (string, error) {
	switch format {
	case pkg.FormatMarkdown:
		return g.generateMarkdown(report)
	case pkg.FormatJSON:
		return g.generateJSON(report)
	case pkg.FormatHTML:
		return g.generateHTML(report)
	default:
		return "", fmt.Errorf("unsupported format: %s", format)
	}
}

// generateMarkdown creates a Markdown report
func (g *Generator) generateMarkdown(report *pkg.AuditReport) (string, error) {
	var buf bytes.Buffer

	// Header
	buf.WriteString("# üîç Tightrope Configuration Audit Report\n\n")
	buf.WriteString(fmt.Sprintf("**Generated:** %s\n", report.Timestamp.Format(time.RFC3339)))
	buf.WriteString(fmt.Sprintf("**Scan Path:** `%s`\n", report.ScanPath))
	buf.WriteString(fmt.Sprintf("**Files Scanned:** %d\n", report.FilesScanned))
	buf.WriteString(fmt.Sprintf("**Total Findings:** %d\n\n", report.Summary.TotalFindings))

	// Summary
	if report.Summary.TotalFindings > 0 {
		buf.WriteString("## üìä Summary\n\n")

		// By Severity
		buf.WriteString("### By Severity\n")
		for severity, count := range report.Summary.FindingsBySeverity {
			emoji := g.getSeverityEmoji(severity)
			buf.WriteString(fmt.Sprintf("- %s **%s:** %d\n", emoji, severity, count))
		}
		buf.WriteString("\n")

		// By Rule
		buf.WriteString("### By Rule Type\n")
		for rule, count := range report.Summary.FindingsByRule {
			buf.WriteString(fmt.Sprintf("- **%s:** %d\n", rule, count))
		}
		buf.WriteString("\n")

		// Detailed Findings
		buf.WriteString("## üö® Detailed Findings\n\n")

		// Group findings by file
		fileFindings := make(map[string][]pkg.ReportEntry)
		for _, finding := range report.Findings {
			fileFindings[finding.FilePath] = append(fileFindings[finding.FilePath], finding)
		}

		for filePath, findings := range fileFindings {
			buf.WriteString(fmt.Sprintf("### üìÑ `%s`\n\n", filePath))

			for _, finding := range findings {
				emoji := g.getSeverityEmoji(finding.Severity)
				lineInfo := ""
				if finding.LineNumber > 0 {
					lineInfo = fmt.Sprintf(" (Line %d)", finding.LineNumber)
				}

				buf.WriteString(fmt.Sprintf("#### %s %s%s\n", emoji, finding.Rule, lineInfo))
				buf.WriteString(fmt.Sprintf("**Message:** %s\n\n", finding.Message))
				buf.WriteString(fmt.Sprintf("**Recommendation:** %s\n\n", finding.Recommendation))

				if finding.Key != "" {
					buf.WriteString(fmt.Sprintf("**Key:** `%s`\n", finding.Key))
				}
				if finding.Value != "" {
					buf.WriteString(fmt.Sprintf("**Value:** `%s`\n", finding.Value))
				}
				buf.WriteString("---\n\n")
			}
		}
	} else {
		buf.WriteString("## ‚úÖ No Issues Found\n\n")
		buf.WriteString("Great! No configuration issues were detected in the scanned files.\n\n")
	}

	// Footer
	buf.WriteString("---\n")
	buf.WriteString("*Generated by Tightrope Configuration Auditor*\n")

	return buf.String(), nil
}

// generateJSON creates a JSON report
func (g *Generator) generateJSON(report *pkg.AuditReport) (string, error) {
	jsonData, err := json.MarshalIndent(report, "", "  ")
	if err != nil {
		return "", fmt.Errorf("failed to marshal JSON: %w", err)
	}
	return string(jsonData), nil
}

// generateHTML creates an HTML report
func (g *Generator) generateHTML(report *pkg.AuditReport) (string, error) {
	tmpl := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tightrope Configuration Audit Report</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .header h1 {
            margin: 0 0 15px 0;
            font-size: 2.5em;
        }
        .header .meta {
            opacity: 0.9;
            font-size: 1.1em;
        }
        .summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .summary-card {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            border-left: 4px solid #667eea;
        }
        .summary-card h3 {
            margin: 0 0 15px 0;
            color: #667eea;
        }
        .findings {
            background: white;
            border-radius: 12px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .file-section {
            margin-bottom: 40px;
            border-bottom: 2px solid #eee;
            padding-bottom: 30px;
        }
        .file-section:last-child {
            border-bottom: none;
        }
        .file-title {
            font-size: 1.4em;
            color: #495057;
            margin-bottom: 20px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            font-family: 'Monaco', 'Menlo', monospace;
        }
        .finding {
            margin-bottom: 25px;
            padding: 20px;
            border-radius: 8px;
            border-left: 4px solid #ddd;
        }
        .finding.critical {
            background: #fff5f5;
            border-left-color: #e53e3e;
        }
        .finding.warning {
            background: #fffbeb;
            border-left-color: #f59e0b;
        }
        .finding.info {
            background: #f0f9ff;
            border-left-color: #3b82f6;
        }
        .finding-header {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }
        .severity-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 600;
            margin-right: 10px;
        }
        .severity-critical {
            background: #e53e3e;
            color: white;
        }
        .severity-warning {
            background: #f59e0b;
            color: white;
        }
        .severity-info {
            background: #3b82f6;
            color: white;
        }
        .finding-rule {
            font-weight: 600;
            color: #495057;
        }
        .finding-line {
            color: #6c757d;
            font-size: 0.9em;
        }
        .finding-message {
            margin: 15px 0;
            font-size: 1.05em;
        }
        .finding-recommendation {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 6px;
            margin: 15px 0;
            border-left: 3px solid #28a745;
        }
        .finding-details {
            margin-top: 15px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            color: #6c757d;
        }
        .no-findings {
            text-align: center;
            padding: 60px 20px;
            color: #28a745;
        }
        .no-findings h2 {
            font-size: 2em;
            margin-bottom: 10px;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
        }
        .stat-item {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 6px;
            text-align: center;
        }
        .stat-count {
            font-size: 1.5em;
            font-weight: 600;
            color: #667eea;
        }
        .stat-label {
            font-size: 0.9em;
            color: #6c757d;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding: 20px;
            color: #6c757d;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç Configuration Audit Report</h1>
        <div class="meta">
            <div><strong>Generated:</strong> {{.Timestamp.Format "2006-01-02 15:04:05 UTC"}}</div>
            <div><strong>Scan Path:</strong> {{.ScanPath}}</div>
            <div><strong>Files Scanned:</strong> {{.FilesScanned}}</div>
        </div>
    </div>

    <div class="summary">
        <div class="summary-card">
            <h3>üìä Overview</h3>
            <div class="stat-item">
                <div class="stat-count">{{.Summary.TotalFindings}}</div>
                <div class="stat-label">Total Findings</div>
            </div>
        </div>
        
        <div class="summary-card">
            <h3>üö® By Severity</h3>
            <div class="stats-grid">
                {{range $severity, $count := .Summary.FindingsBySeverity}}
                <div class="stat-item">
                    <div class="stat-count">{{$count}}</div>
                    <div class="stat-label">{{$severity}}</div>
                </div>
                {{end}}
            </div>
        </div>
        
        <div class="summary-card">
            <h3>üîç By Rule Type</h3>
            <div class="stats-grid">
                {{range $rule, $count := .Summary.FindingsByRule}}
                <div class="stat-item">
                    <div class="stat-count">{{$count}}</div>
                    <div class="stat-label">{{$rule}}</div>
                </div>
                {{end}}
            </div>
        </div>
    </div>

    {{if gt .Summary.TotalFindings 0}}
    <div class="findings">
        <h2>üö® Detailed Findings</h2>
        {{range $filePath, $findings := .GroupedFindings}}
        <div class="file-section">
            <div class="file-title">üìÑ {{$filePath}}</div>
            {{range $findings}}
            <div class="finding {{.SeverityClass}}">
                <div class="finding-header">
                    <span class="severity-badge severity-{{.SeverityClass}}">{{.Severity}}</span>
                    <span class="finding-rule">{{.Rule}}</span>
                    {{if gt .LineNumber 0}}
                    <span class="finding-line">(Line {{.LineNumber}})</span>
                    {{end}}
                </div>
                <div class="finding-message">{{.Message}}</div>
                <div class="finding-recommendation">
                    <strong>üí° Recommendation:</strong> {{.Recommendation}}
                </div>
                {{if .Key}}
                <div class="finding-details">
                    <strong>Key:</strong> {{.Key}}
                    {{if .Value}}<br><strong>Value:</strong> {{.Value}}{{end}}
                </div>
                {{end}}
            </div>
            {{end}}
        </div>
        {{end}}
    </div>
    {{else}}
    <div class="findings">
        <div class="no-findings">
            <h2>‚úÖ All Clear!</h2>
            <p>No configuration issues were detected in the scanned files.</p>
        </div>
    </div>
    {{end}}

    <div class="footer">
        Generated by Tightrope Configuration Auditor
    </div>
</body>
</html>`

	// Prepare data for template
	data := struct {
		*pkg.AuditReport
		GroupedFindings map[string][]struct {
			pkg.ReportEntry
			SeverityClass string
		}
	}{
		AuditReport: report,
		GroupedFindings: make(map[string][]struct {
			pkg.ReportEntry
			SeverityClass string
		}),
	}

	// Group findings by file and add severity classes
	for _, finding := range report.Findings {
		severityClass := strings.ToLower(string(finding.Severity))
		data.GroupedFindings[finding.FilePath] = append(
			data.GroupedFindings[finding.FilePath],
			struct {
				pkg.ReportEntry
				SeverityClass string
			}{
				ReportEntry:   finding,
				SeverityClass: severityClass,
			},
		)
	}

	t, err := template.New("report").Parse(tmpl)
	if err != nil {
		return "", fmt.Errorf("failed to parse HTML template: %w", err)
	}

	var buf bytes.Buffer
	if err := t.Execute(&buf, data); err != nil {
		return "", fmt.Errorf("failed to execute HTML template: %w", err)
	}

	return buf.String(), nil
}

// getSeverityEmoji returns an emoji for the given severity level
func (g *Generator) getSeverityEmoji(severity pkg.Severity) string {
	switch severity {
	case pkg.SeverityCritical:
		return "üö®"
	case pkg.SeverityWarning:
		return "‚ö†Ô∏è"
	case pkg.SeverityInfo:
		return "‚ÑπÔ∏è"
	default:
		return "‚ùì"
	}
}
